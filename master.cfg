# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *

import os

c = BuildmasterConfig = {}

import user_config

current_dir = os.path.dirname(os.path.abspath(__file__))

## SECRETS MANAGEMENT

secrets_dir = os.path.join(current_dir, "master-secrets")

c["secretsProviders"] = [secrets.SecretInAFile(dirname=secrets_dir)]

## CHANGE SOURCES

# keep it empty here; we'll hook it from github via www
c["change_source"] = []
c["collapseRequests"] = True

## MASTER TO WORKER INTERFACE

# the master will listen here
c["protocols"] = {}
c["protocols"][user_config.master_protocol] = {"port": user_config.master_port}

## DATABASE

c["db"] = {
    "db_url": user_config.master_db,
}

## WEB INTERFACE AND IDENTITY

# basically just deny everybody access for now
authz = util.Authz(
    allowRules=[util.AnyControlEndpointMatcher(role="admins")],
    roleMatchers=[],
)

c["title"] = user_config.title
c["titleURL"] = user_config.title_url

c["buildbotURL"] = user_config.bot_url

c["www"] = dict(
    port=user_config.www_port,
    authz=authz,
    change_hook_dialects=dict(github={"secret": util.Secret("github-webhook-token")}),
    plugins=dict(
        waterfall_view={},
        console_view={},
        grid_view={},
    ),
)
## SERVICES

# TODO: irc bot
c["services"] = []

## MACHINE DEFINITION
#
# Here we conflate worker, scheduler, and builder into one, as there is one
# worker per architecture, one scheduler per worker, one builder per
# scheduler, in order to make sure all kick in upon changes being received

c["workers"] = []
c["schedulers"] = []
c["builders"] = []


def gen_machine(c, machdict):
    archn = machdict["arch"]

    workn = f"worker-{archn}"
    schedn = f"scheduler-{archn}"
    buildn = f"builder-{archn}"

    # add worker for the arch
    w = worker.Worker(
        workn,
        util.Secret(f"pass-worker-{archn}"),
        properties={},
        defaultProperties={}
    )
    c["workers"].append(w)

    # add scheduler for the arch
    s = schedulers.SingleBranchScheduler(
        name=schedn,
        change_filter=util.ChangeFilter(branch=user_config.cports_branch),
        # give the changes a chance to accumulate
        treeStableTimer=2,
        builderNames=[buildn],
    )
    c["schedulers"].append(s)

    # create build factory
    f = util.BuildFactory()

    cmd_base = ["./cbuild"]
    # only pass if specified
    if "config" in machdict:
        cmd_base += ["-c", machdict["config"]]
    if "opts" in machdict:
        cmd_base += machdict["opts"]

    rsync = [
        'rsync',
        '-amrt',
        '--progress',
        '--exclude',
        '*.lock',
        '-e',
        user_config.repo_ssh
    ]
    rsync_dest = [
        machdict["repo-src"],
        f"{user_config.repo_dest}:{machdict['repo-dest']}"

    ]

    f.addStep(
        steps.Git(
            repourl=user_config.cports_repo,
            mode="incremental",
            alwaysUseLatest=True,
            name="cports_update",
            description="Updating cports",
            descriptionDone="Updated cports",
            logEnviron=False,
            haltOnFailure=True,
        )
    )
    f.addStep(
        steps.ShellCommand(
            command=cmd_base + ["bootstrap-update"],
            name="bldroot_update",
            description="Bldroot update",
            descriptionDone="Bldroot updated",
            logEnviron=False,
            haltOnFailure=True,
        )
    )
    f.addStep(
        steps.SetPropertyFromCommand(
            command=cmd_base + ["print-unbuilt"],
            property="pkgs",
            name="find_unbuilt",
            description="Find unbuilt",
            descriptionDone="Found unbuilt",
            logEnviron=False,
            haltOnFailure=True,
        )
    )
    f.addStep(
        steps.ShellCommand(
            command=cmd_base + ["bulk-pkg", util.Interpolate("list:%(prop:pkgs)s")],
            name="build_packages",
            description="Build packages",
            descriptionDone="Built packages",
            logEnviron=False,
            haltOnFailure=True,
        )
    )
    f.addStep(
        steps.ShellCommand(
            command=cmd_base + ["prune-pkgs"],
            name="prune_packages",
            description="Prune packages",
            descriptionDone="Pruned packages",
            logEnviron=False,
            haltOnFailure=True,
        )
    )
    f.addStep(
        steps.ShellCommand(
            command=rsync + [
                "--exclude",
                "*.gz",
            ] + rsync_dest,
            name="upload_packages",
            description="Upload packages",
            descriptionDone="Uploaded packages",
            logEnviron=False,
            haltOnFailure=True,
        )
    )
    f.addStep(
        steps.ShellCommand(
            command=rsync + [
                "--delete",
            ] + rsync_dest,
            name="sync_repos",
            description="Synchronize repos",
            descriptionDone="Synchronized repos",
            logEnviron=False,
            haltOnFailure=True,
        )
    )

    # add builder for the arch
    b = util.BuilderConfig(name=buildn, workernames=[workn], factory=f)
    c["builders"].append(b)


for machdict in user_config.machines:
    gen_machine(c, machdict)
